{"version":3,"sources":["components/Navbar.js","styles/NavbarStyles.js","components/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","navbar","display","justifyContent","alignItems","height","logo","marginRight","padding","fontSize","backgroundColor","fontFamily","textDecoration","color","signout","props","classes","className","href","addspot","Button","variant","to","LoginPage","App","exact","path","render","routeProps","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PA6BeA,kBC7BA,CACbC,OAAQ,CACNC,QAAS,OACTC,eAAgB,aAChBC,WAAY,SACZC,OAAQ,OAEVC,KAAM,CACJC,YAAa,OACbC,QAAS,SACTC,SAAU,OACVC,gBAAiB,uBACjBC,WAAY,uBACZN,OAAQ,OACRH,QAAS,OACTE,WAAY,SACZ,MAAO,CACLQ,eAAgB,OAChBC,MAAO,UAGXC,QAAS,CACP,MAAO,CACLF,eAAgB,UDMPZ,EAvBf,SAAgBe,GAAQ,IACdC,EAAYD,EAAZC,QACR,OACE,4BAAQC,UAAWD,EAAQf,QACzB,yBAAKgB,UAAWD,EAAQV,MACtB,uBAAGY,KAAK,0BAAR,UAEF,yBAAKD,UAAWD,EAAQG,SACtB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYR,MAAM,WAAlC,aAIF,yBAAKI,UAAWD,EAAQF,SACtB,kBAAC,IAAD,CAAMQ,GAAG,KACP,kBAACF,EAAA,EAAD,CAAQC,QAAQ,YAAYR,MAAM,WAAlC,kB,MEPKU,MARf,SAAmBR,GACjB,OACE,6BACE,2C,MCaSS,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQJ,IAC9B,kBAAC,IAAD,CACEE,OAAK,EACLC,KAAK,QACLC,OAAQ,SAAAC,GAAU,OAAI,kBAAC,EAAWA,SCFxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.14fbf275.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"../styles/NavbarStyles\";\n\nfunction Navbar(props) {\n  const { classes } = props;\n  return (\n    <header className={classes.navbar}>\n      <div className={classes.logo}>\n        <a href=\"https://liviupreda.me/\">KTSRF</a>\n      </div>\n      <div className={classes.addspot}>\n        <Button variant=\"contained\" color=\"primary\">\n          Add Spot\n        </Button>\n      </div>\n      <div className={classes.signout}>\n        <Link to=\"/\">\n          <Button variant=\"contained\" color=\"primary\">\n            Sign Out\n          </Button>\n        </Link>\n      </div>\n    </header>\n  );\n}\n\nexport default withStyles(styles)(Navbar);\n","export default {\n  navbar: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    height: \"5vh\"\n  },\n  logo: {\n    marginRight: \"15px\",\n    padding: \"0 13px\",\n    fontSize: \"22px\",\n    backgroundColor: \"rgba(0, 212, 255, 1)\",\n    fontFamily: '\"Roboto\", sans-serif',\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& a\": {\n      textDecoration: \"none\",\n      color: \"black\"\n    }\n  },\n  signout: {\n    \"& a\": {\n      textDecoration: \"none\"\n    }\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction LoginPage(props) {\n  return (\n    <div>\n      <p>Login Page</p>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport LoginPage from \"./components/LoginPage\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" render={LoginPage} />\n        <Route\n          exact\n          path=\"/home\"\n          render={routeProps => <Navbar {...routeProps} />}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}